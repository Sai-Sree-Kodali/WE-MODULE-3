Solving Queries Using SQL and NoSQL
Databases
Sai Sree Kodali
May 7, 2024

Problem Statement: To design a simplified Pokemon database with
tables for Pokemon, Types, and Moves, handling the many-to-many relationship between Pokemon and Moves using a junction table.

1 Using SQL
I’ve used MySQL as the database management system to solve the queries
using SQL in the context of a simplified Pokemon database. I started by
designing the database schema. I’ve taken the help of ChatGPT for designing. There were 4 tables that have been created which were Pokemon(with
primary and secondary types), Type, Move, Pokemon-Move. With the help
of chatgpt the process of making the tables was easier. To solve the queries I
took the help of ChatGPT which was able to give a decent performance gradually with an improved number of prompts. For finding Pokemon who can
learn ’Return’,JOINs was used to connect Pokemon and Move tables based
on the Pokemon’s moves. To identify moves powerful against Grass, JOINs
is used to connect Move and Type tables, filtering moves by type effectiveness.The query to find Pok´emon who can learn ’Return’ returned Bulbasaur,
Charmander, Squirtle, Eevee, and Pidgey.The query to find moves powerful
against Grass returned Ember and Wing Attack. Using the SQL queries
which was generated by GenAI, I’ve successfully retrieved the required information.

2 Using NoSQL
I’ve used MongoDB as the database management system to solve the queries
using NoSQL in the context of a simplified Pokemon database. I started
by designing the database schema. I’ve taken the help of ChatGPT for
designing. There were 4 collections that have been created which were Pokemon, Type, Move, and a junction collection for the many-to-many relationship between Pokemon and Move. The schema designed will be flexible and
document-based, which aligns well with the dynamic nature of Pokemon attributes. With the help of ChatGPT, the process of making the collections
was not easier as it was not giving the correct prompts for the insertion of
data, I used Gemini as well for inserting the data which has also failed. I
used online resources to learn about the data entry. To solve the queries
I took the help of ChatGPT which was able to give a decent performance
gradually with an improved number of prompts. We can easily query MongoDB to retrieve the information, but the ChatGPT was unable to give the
correct snippets to find the data but the logic provided by it was correct
after trimming the prompts I was able to get the output. MongoDB offers
a flexible and scalable solution for managing Pokemon data. Its documentbased model, dynamic schema, and powerful querying capabilities make it
suitable for handling complex relationships and diverse attributes inherent
in Pokemon data.

3 Conclusion
I was previously acquainted with SQL so using MySQL was easier and was
less time consuming on the other hand I was not having much knowledge
about NoSQL so using that was confusing, but some of the concepts were
similar. The creation and insertion of data was easier in SQL compared to
NoSQL using ChatGPT, Gemini. The querying data was easier in NoSQL
though I had difficulty initially. I could understand that SQL databases might
excel in scenarios where data relationships are well-defined and require strict
enforcement and NoSQL offers a flexible and scalable solution for managing
databases. I truly had fun solving this assignment :)
